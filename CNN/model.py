import torch.nn as nn
import torch.nn.functional as F

# CNN TIPO 1 CON UNA CAPA LINEAL


class CNN1P1H1h(nn.Module):
    def __init__(self):
        super(CNN1P1H1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 80, 2, stride=2)
        self.conv4 = nn.Conv1d(80, 100, 10)
        self.l1 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(80)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H2h(nn.Module):
    def __init__(self):
        super(CNN1P1H2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 80, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(80)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H5h(nn.Module):
    def __init__(self):
        super(CNN1P1H5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H1k(nn.Module):
    def __init__(self):
        super(CNN1P1H1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H2k(nn.Module):
    def __init__(self):
        super(CNN1P1H2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 2000, 10)
        self.l1 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H3k(nn.Module):
    def __init__(self):
        super(CNN1P1H3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 3000, 10)
        self.l1 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H4k(nn.Module):
    def __init__(self):
        super(CNN1P1H4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 4000, 10)
        self.l1 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H5k(nn.Module):
    def __init__(self):
        super(CNN1P1H5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 5000, 10)
        self.l1 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn1(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H6k(nn.Module):
    def __init__(self):
        super(CNN1P1H6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 6000, 10)
        self.l1 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN1P1H10k(nn.Module):
    def __init__(self):
        super(CNN1P1H10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


# CNN TIPO 1 CON DOS CAPAS LINEALEs


class CNN1P2H10k10k(nn.Module):
    def __init__(self):
        super(CNN1P2H10k10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 10000)
        self.l2 = nn.Linear(10000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H10k5k(nn.Module):
    def __init__(self):
        super(CNN1P2H10k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H10k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H10k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H10k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H10k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H10k10(nn.Module):
    def __init__(self):
        super(CNN1P2H10k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 2, stride=2)
        self.conv2 = nn.Conv1d(100, 1000, 2, stride=2)
        self.conv3 = nn.Conv1d(1000, 5000, 2, stride=2)
        self.conv4 = nn.Conv1d(5000, 10000, 10)
        self.l1 = nn.Linear(10000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(1000)
        self.bn3 = nn.BatchNorm1d(5000)
        self.bn4 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H6k6k(nn.Module):
    def __init__(self):
        super(CNN1P2H6k6k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 6000, 10)
        self.l1 = nn.Linear(6000, 6000)
        self.l2 = nn.Linear(6000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H6k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H6k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 6000, 10)
        self.l1 = nn.Linear(6000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H6k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H6k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 6000, 10)
        self.l1 = nn.Linear(6000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H6k10(nn.Module):
    def __init__(self):
        super(CNN1P2H6k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 6000, 10)
        self.l1 = nn.Linear(6000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(6000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5k5k(nn.Module):
    def __init__(self):
        super(CNN1P2H5k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 5000, 10)
        self.l1 = nn.Linear(5000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H5k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 5000, 10)
        self.l1 = nn.Linear(5000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H5k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 5000, 10)
        self.l1 = nn.Linear(5000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5k10(nn.Module):
    def __init__(self):
        super(CNN1P2H5k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 5000, 10)
        self.l1 = nn.Linear(5000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H4k4k(nn.Module):
    def __init__(self):
        super(CNN1P2H4k4k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 4000, 10)
        self.l1 = nn.Linear(4000, 4000)
        self.l2 = nn.Linear(4000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H4k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H4k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 4000, 10)
        self.l1 = nn.Linear(4000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H4k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H4k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 4000, 10)
        self.l1 = nn.Linear(4000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H4k10(nn.Module):
    def __init__(self):
        super(CNN1P2H4k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 4000, 10)
        self.l1 = nn.Linear(4000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(4000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H3k3k(nn.Module):
    def __init__(self):
        super(CNN1P2H3k3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 3000, 10)
        self.l1 = nn.Linear(3000, 3000)
        self.l2 = nn.Linear(3000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H3k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H3k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 3000, 10)
        self.l1 = nn.Linear(3000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H3k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H3k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 3000, 10)
        self.l1 = nn.Linear(3000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H3k10(nn.Module):
    def __init__(self):
        super(CNN1P2H3k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 3000, 10)
        self.l1 = nn.Linear(3000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2k2k(nn.Module):
    def __init__(self):
        super(CNN1P2H2k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 2000, 10)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H2k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 2000, 10)
        self.l1 = nn.Linear(2000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H2k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 2000, 10)
        self.l1 = nn.Linear(2000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2k10(nn.Module):
    def __init__(self):
        super(CNN1P2H2k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 2000, 10)
        self.l1 = nn.Linear(2000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H1k1k(nn.Module):
    def __init__(self):
        super(CNN1P2H1k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H1k1h(nn.Module):
    def __init__(self):
        super(CNN1P2H1k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H1k10(nn.Module):
    def __init__(self):
        super(CNN1P2H1k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5h5h(nn.Module):
    def __init__(self):
        super(CNN1P2H5h5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5h1h(nn.Module):
    def __init__(self):
        super(CNN1P2H5h1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H5h10(nn.Module):
    def __init__(self):
        super(CNN1P2H5h10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 2, stride=2)
        self.conv4 = nn.Conv1d(200, 500, 10)
        self.l1 = nn.Linear(500, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(500)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2h2h(nn.Module):
    def __init__(self):
        super(CNN1P2H2h2h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 200)
        self.l2 = nn.Linear(200, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2h1h(nn.Module):
    def __init__(self):
        super(CNN1P2H2h1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H2h10(nn.Module):
    def __init__(self):
        super(CNN1P2H2h10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 2, stride=2)
        self.conv4 = nn.Conv1d(100, 200, 10)
        self.l1 = nn.Linear(200, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H1h1h(nn.Module):
    def __init__(self):
        super(CNN1P2H1h1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 80, 2, stride=2)
        self.conv4 = nn.Conv1d(80, 100, 10)
        self.l1 = nn.Linear(100, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(80)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN1P2H1h10(nn.Module):
    def __init__(self):
        super(CNN1P2H1h10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 50, 2, stride=2)
        self.conv3 = nn.Conv1d(50, 80, 2, stride=2)
        self.conv4 = nn.Conv1d(80, 100, 10)
        self.l1 = nn.Linear(100, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(80)
        self.bn4 = nn.BatchNorm1d(100)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# CNN TIPO 2 1 CAPA DE SALIDA


class CNN2P1H20k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H15k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H10k(nn.Module):
    def __init__(self):
        super(CNN2P1H10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H5k(nn.Module):
    def __init__(self):
        super(CNN2P1H5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H3k(nn.Module):
    def __init__(self):
        super(CNN2P1H3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H2k(nn.Module):
    def __init__(self):
        super(CNN2P1H2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


class CNN2P1H1k(nn.Module):
    def __init__(self):
        super(CNN2P1H1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = self.l1(wave)
        return self.sigmoid(wave)


# CNN TIPO 2 2 CAPA DE SALIDA, 20k


class CNN2P1H20k20k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k20k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 20000)
        self.l2 = nn.Linear(20000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k10k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 10000)
        self.l2 = nn.Linear(10000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k5k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H20k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H20k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H20k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H20k10(nn.Module):
    def __init__(self):
        super(CNN2P1H20k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 2000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(2000, 5000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(5000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 20000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(20000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(2000)
        self.bn6 = nn.BatchNorm1d(5000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(20000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


# CNN TIPO 2 2 CAPA DE SALIDA, 15k


class CNN2P1H15k15k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k15k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 15000)
        self.l2 = nn.Linear(15000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k10k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 10000)
        self.l2 = nn.Linear(10000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k5k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H15k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H15k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H15k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H15k10(nn.Module):
    def __init__(self):
        super(CNN2P1H15k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 500, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(3000, 10000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(10000, 15000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(15000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.bn5 = nn.BatchNorm1d(1500)
        self.bn6 = nn.BatchNorm1d(3000)
        self.bn7 = nn.BatchNorm1d(10000)
        self.bn8 = nn.BatchNorm1d(15000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


# CNN TIPO 2 2 CAPA DE SALIDA, 10k


class CNN2P1H10k10k(nn.Module):
    def __init__(self):
        super(CNN2P1H10k10k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 10000)
        self.l2 = nn.Linear(10000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k5k(nn.Module):
    def __init__(self):
        super(CNN2P1H10k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H10k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H10k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H10k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H10k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H10k10(nn.Module):
    def __init__(self):
        super(CNN2P1H10k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 2000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(2000, 5000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(5000, 10000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(10000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(2000)
        self.bn7 = nn.BatchNorm1d(5000)
        self.bn8 = nn.BatchNorm1d(10000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# CNN TIPO 2 2 CAPA DE SALIDA, 5k


class CNN2P1H5k5k(nn.Module):
    def __init__(self):
        super(CNN2P1H5k5k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 5000)
        self.l2 = nn.Linear(5000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H5k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k2k5(nn.Module):
    def __init__(self):
        super(CNN2P1H5k2k5, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 2500)
        self.l2 = nn.Linear(2500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H5k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H5k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H5k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H5k10(nn.Module):
    def __init__(self):
        super(CNN2P1H5k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 100, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(500, 1000, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(1000, 1500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1500, 3000, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(3000, 5000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(5000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(100)
        self.bn2 = nn.BatchNorm1d(200)
        self.bn3 = nn.BatchNorm1d(300)
        self.bn4 = nn.BatchNorm1d(500)
        self.bn5 = nn.BatchNorm1d(1000)
        self.bn6 = nn.BatchNorm1d(1500)
        self.bn7 = nn.BatchNorm1d(3000)
        self.bn8 = nn.BatchNorm1d(5000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# CNN TIPO 2 2 CAPA DE SALIDA, 3k


class CNN2P1H3k3k(nn.Module):
    def __init__(self):
        super(CNN2P1H3k3k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 3000)
        self.l1 = nn.Linear(3000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H3k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 2000)
        self.l1 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k1k5(nn.Module):
    def __init__(self):
        super(CNN2P1H3k1k5, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1500)
        self.l1 = nn.Linear(1500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H3k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 1000)
        self.l1 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H3k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 500)
        self.l1 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H3k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 100)
        self.l1 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H3k10(nn.Module):
    def __init__(self):
        super(CNN2P1H3k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(100, 100, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(100, 200, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(200, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 3000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(3000, 10)
        self.l1 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(200)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(3000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# CNN TIPO 2 2 CAPA DE SALIDA, 2k


class CNN2P1H2k2k(nn.Module):
    def __init__(self):
        super(CNN2P1H2k2k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H2k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H2k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H2k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H2k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H2k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H2k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H2k10(nn.Module):
    def __init__(self):
        super(CNN2P1H2k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 10)
        self.l2 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# CNN TIPO 2 2 CAPA DE SALIDA, 1k


class CNN2P1H1k1k(nn.Module):
    def __init__(self):
        super(CNN2P1H1k1k, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 1000)
        self.l2 = nn.Linear(1000, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H1k5h(nn.Module):
    def __init__(self):
        super(CNN2P1H1k5h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 500)
        self.l2 = nn.Linear(500, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H1k1h(nn.Module):
    def __init__(self):
        super(CNN2P1H1k1h, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)


class CNN2P1H1k10(nn.Module):
    def __init__(self):
        super(CNN2P1H1k10, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 200, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(200, 300, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(300, 500, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(500, 800, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(800, 1000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(1000, 10)
        self.l2 = nn.Linear(100, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(200)
        self.bn5 = nn.BatchNorm1d(300)
        self.bn6 = nn.BatchNorm1d(500)
        self.bn7 = nn.BatchNorm1d(800)
        self.bn8 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = self.l2(wave)
        return self.sigmoid(wave)

# OTROS


class ClassConv(nn.Module):
    def __init__(self):
        super(ClassConv, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 10)
        self.l3 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = F.relu(self.conv1(wave))
        wave = self.p1(wave)
        wave = F.relu(self.conv2(wave))
        wave = self.p2(wave)
        wave = F.relu(self.conv3(wave))
        wave = self.p2(wave)
        wave = F.relu(self.conv4(wave))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = F.relu(self.l2(wave))
        wave = self.l3(wave)
        return self.sigmoid(wave)


class ClassConvBN(nn.Module):
    def __init__(self):
        super(ClassConvBN, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 2, stride=2)
        self.conv2 = nn.Conv1d(10, 100, 2, stride=2)
        self.conv3 = nn.Conv1d(100, 500, 2, stride=2)
        self.conv4 = nn.Conv1d(500, 1000, 10)
        self.l1 = nn.Linear(1000, 100)
        self.l2 = nn.Linear(100, 10)
        self.l3 = nn.Linear(10, 1)
        self.p1 = nn.AvgPool1d(3)
        self.p2 = nn.AvgPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(100)
        self.bn3 = nn.BatchNorm1d(500)
        self.bn4 = nn.BatchNorm1d(1000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.p1(wave)
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p2(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.p2(wave)
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = F.relu(self.l2(wave))
        wave = self.l3(wave)
        return self.sigmoid(wave)


class CBN_v2(nn.Module):
    def __init__(self):
        super(CBN_v2, self).__init__()

        self.conv1 = nn.Conv1d(1, 10, 3, padding=1, stride=1)
        self.conv2 = nn.Conv1d(10, 50, 3, padding=1, stride=2)
        self.conv3 = nn.Conv1d(50, 100, 3, padding=1, stride=1)
        self.conv4 = nn.Conv1d(100, 300, 3, padding=1, stride=2)
        self.conv5 = nn.Conv1d(300, 500, 3, padding=1, stride=1)
        self.conv6 = nn.Conv1d(500, 1000, 3, padding=1, stride=2)
        self.conv7 = nn.Conv1d(1000, 1500, 3, padding=1, stride=1)
        self.conv8 = nn.Conv1d(1500, 2000, 3, padding=1, stride=2)
        self.l1 = nn.Linear(2000, 2000)
        self.l2 = nn.Linear(2000, 1000)
        self.l3 = nn.Linear(1000, 100)
        self.l4 = nn.Linear(100, 10)
        self.l5 = nn.Linear(10, 1)
        self.p1 = nn.MaxPool1d(3)
        self.p2 = nn.MaxPool1d(5)
        self.p3 = nn.MaxPool1d(5)
        self.p4 = nn.MaxPool1d(5)
        self.bn1 = nn.BatchNorm1d(10)
        self.bn2 = nn.BatchNorm1d(50)
        self.bn3 = nn.BatchNorm1d(100)
        self.bn4 = nn.BatchNorm1d(300)
        self.bn5 = nn.BatchNorm1d(500)
        self.bn6 = nn.BatchNorm1d(1000)
        self.bn7 = nn.BatchNorm1d(1500)
        self.bn8 = nn.BatchNorm1d(2000)
        self.sigmoid = nn.Sigmoid()

    def forward(self, wave):
        wave = wave.view(-1, 1, 6000)
        wave = self.bn1(F.relu(self.conv1(wave)))
        wave = self.bn2(F.relu(self.conv2(wave)))
        wave = self.p1(wave)
        wave = self.bn3(F.relu(self.conv3(wave)))
        wave = self.bn4(F.relu(self.conv4(wave)))
        wave = self.p2(wave)
        wave = self.bn5(F.relu(self.conv5(wave)))
        wave = self.bn6(F.relu(self.conv6(wave)))
        wave = self.p3(wave)
        wave = self.bn7(F.relu(self.conv7(wave)))
        wave = self.bn8(F.relu(self.conv8(wave)))
        wave = self.p4(wave)
        wave = wave.squeeze()
        wave = F.relu(self.l1(wave))
        wave = F.relu(self.l2(wave))
        wave = F.relu(self.l3(wave))
        wave = F.relu(self.l4(wave))
        wave = self.l5(wave)
        return self.sigmoid(wave)
